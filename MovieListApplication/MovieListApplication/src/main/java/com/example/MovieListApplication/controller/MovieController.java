package com.example.MovieListApplication.controller;import java.util.List;import java.util.Map;import com.example.MovieListApplication.entity.Movie;import com.example.MovieListApplication.service.DataBaseService;import jakarta.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.view.RedirectView;import java.util.HashMap;@Controllerpublic class MovieController {    @Autowired    DataBaseService dataBaseService;    @GetMapping("/watchListItemForm")    public ModelAndView showWatchListForm(@RequestParam(required = false)Integer id)    {        String viewName = "watchListItemForm";        Map<String,Object> model = new HashMap<>();        if(id == null)        {            model.put("watchListItem", new Movie());        }        else        {            model.put("watchListItem",dataBaseService.getMovieById(id));        }        return new ModelAndView(viewName,model);    }    @PostMapping("/watchListItemForm")    public ModelAndView submitWatchListForm(@Valid @ModelAttribute("watchListItem") Movie movie, BindingResult bindingResult)    {        if(bindingResult.hasErrors())        {            //if errors are there , redisplay the form let user enter again            System.out.println(bindingResult.hasErrors());            return new ModelAndView("watchListItemForm");        }//        If(id==null)//        {//            create new movie//        }//        else//        {//            update//        }        Integer id = movie.getId();        if(id == null)        {            dataBaseService.create(movie);        }        else        {            dataBaseService.update(movie , id);        }        RedirectView rd = new RedirectView();        rd.setUrl("/watchList");        return new ModelAndView(rd);    }    @GetMapping("/watchList")    public ModelAndView getWatchList(){        String viewName="watchList";        Map<String,Object> model = new HashMap<>();        List<Movie> movieList = dataBaseService.getAllMovies();        model.put("watchlistrows",movieList);        model.put("noofmovies", movieList.size());        return new ModelAndView(viewName,model);    }}